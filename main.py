import os
import math
import logging
import pandas as pd
import asyncio
import aiohttp
from typing import List, Dict, Tuple
from urllib.parse import quote_plus
import re
import numpy as np
from datetime import datetime, date

from telegram import (
    Update,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    ReplyKeyboardMarkup,
    KeyboardButton,
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    ConversationHandler,
    filters,
    CallbackQueryHandler,
)

# ================== Logging ==================
logging.basicConfig(
    format="%(asctime)s %(levelname)s %(name)s | %(message)s", level=logging.INFO
)
logger = logging.getLogger("ai-travel-crimea")

# ================== States ===================
ASK_CITY, ASK_INTERESTS, ASK_CAR = range(3)

# ============== Data & Config =================
BASE_DIR = os.path.dirname(__file__)
CSV_PATH = os.path.join(BASE_DIR, "places_semicolon_fixed.csv")

def parse_rating(v):
    """–£—Å—Ç–æ–π—á–∏–≤—ã–π –ø–∞—Ä—Å–µ—Ä —Ä–µ–π—Ç–∏–Ω–≥–∞: 4,8 / 4.75 / '4,7 –∏–∑ 5' / '04.07.2024' ‚Üí 4.7 –∏ —Ç.–¥."""
    import re
    import numpy as np
    from datetime import datetime, date

    if isinstance(v, (pd.Timestamp, datetime, date)):
        # –ò–∑ Excel –ø—Ä–∏—à–ª–æ –∫–∞–∫ –¥–∞—Ç–∞-—Ç–∏–ø ‚Äî –Ω–∏—á–µ–≥–æ –Ω–∞–¥—ë–∂–Ω–æ –Ω–µ –≤—ã—Ç–∞—â–∏–º ‚Üí –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ
        return 4.5

    s = str(v).strip()
    if not s or s.lower() in {"nan", "none"}:
        return np.nan

    # A) –§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã dd.mm.yyyy ‚Üí –±–µ—Ä—ë–º dd.mm ‚Üí x.y
    m = re.match(r"^0?(\d{1,2})[.\-/]0?(\d{1,2})[.\-/]\d{2,4}$", s)
    if m:
        x, y = int(m.group(1)), int(m.group(2))
        val = x + (y / 10.0)
        return max(0.0, min(10.0, val))

    # B) –î–µ—Å—è—Ç–∏—á–Ω–æ–µ —á–∏—Å–ª–æ —Å 1‚Äì2 –∑–Ω–∞–∫–∞–º–∏: 4,7 / 4.8 / 4,75 / 9.99
    m = re.search(r"(\d{1,2})[.,](\d{1,2})", s)
    if m:
        whole = int(m.group(1))
        frac = m.group(2)
        val = float(f"{whole}.{frac}")
        return max(0.0, min(10.0, val))

    # C) –ü—Ä–æ—Å—Ç–æ —Ü–µ–ª–æ–µ 0‚Äì10 (–≤ —Ç.—á. —Å—Ç—Ä–æ–∫–∏ —Ç–∏–ø–∞ '4 –∏–∑ 5')
    m = re.search(r"\b(\d{1,2})\b", s)
    if m:
        val = float(m.group(1))
        if 0 <= val <= 10:
            return val

    # D) –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ ‚Äî –∑–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—É—é –Ω–∞ —Ç–æ—á–∫—É –∏ –ø–∞—Ä—Å–∏–º float
    try:
        val = float(s.replace(",", "."))
        return val if 0 <= val <= 10 else np.nan
    except:
        return np.nan


    try:
        val = float(s.replace(",", "."))
        return val if 0 <= val <= 10 else np.nan
    except:
        return np.nan


df = pd.read_csv(
    CSV_PATH,
    sep=";",
    encoding="utf-8-sig",
    converters={"rating": parse_rating}
)


# ============== Interests =====================
INTERESTS = [
    ("–º–æ—Ä–µ", "üåä –ú–æ—Ä–µ/–ø–ª—è–∂–∏"),
    ("–∏—Å—Ç–æ—Ä–∏—è", "üèõ –ò—Å—Ç–æ—Ä–∏—è/–º—É–∑–µ–∏"),
    ("–ø—Ä–∏—Ä–æ–¥–∞", "üåø –ü—Ä–∏—Ä–æ–¥–∞"),
    ("—Ñ–æ—Ç–æ", "üì∏ –§–æ—Ç–æ"),
    ("–ø–æ—Ö–æ–¥", "ü•æ –¢—Ä–µ–∫–∏–Ω–≥"),
    ("—Å–µ–º—å—è", "üë®‚Äçüë©‚Äçüëß –°–µ–º–µ–π–Ω—ã–π –æ—Ç–¥—ã—Ö"),
    ("–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞", "üè∞ –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞"),
    ("–∫–∞—Ñ–µ", "‚òï –ö–∞—Ñ–µ/–ø—Ä–æ–≥—É–ª–∫–∞"),
    ("—Ç—É–∞–ª–µ—Ç—ã", "üöª –¢—É–∞–ª–µ—Ç—ã –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏"),
    ("–º–µ–¥–∏—Ü–∏–Ω–∞", "üè• –ú–µ–¥–ø–æ–º–æ—â—å –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏"),
    ("–ø–æ–ª–∏—Ü–∏—è", "üëÆ –ü–æ–ª–∏—Ü–∏—è / –ø–æ–º–æ—â—å"),
]

# –ì–æ—Ä–æ–¥–∞
CITIES_PRESETS: Dict[str, Tuple[float, float]] = {
    "–°–µ–≤–∞—Å—Ç–æ–ø–æ–ª—å": (44.6167, 33.5254),
    "–Ø–ª—Ç–∞": (44.4985, 34.1661),
    "–°–∏–º—Ñ–µ—Ä–æ–ø–æ–ª—å": (44.9482, 34.1003),
    "–°—É–¥–∞–∫": (44.8512, 34.9747),
    "–§–µ–æ–¥–æ—Å–∏—è": (45.0319, 35.3825),
    "–ï–≤–ø–∞—Ç–æ—Ä–∏—è": (45.1904, 33.3665),
    "–ù–æ–≤—ã–π –°–≤–µ—Ç": (44.8295, 34.9141),
    "–ê–ª—É—à—Ç–∞": (44.6764, 34.4100),
}

COASTAL_CITIES = {"–Ø–ª—Ç–∞", "–°–µ–≤–∞—Å—Ç–æ–ø–æ–ª—å", "–ê–ª—É—à—Ç–∞", "–°—É–¥–∞–∫", "–§–µ–æ–¥–æ—Å–∏—è", "–ï–≤–ø–∞—Ç–æ—Ä–∏—è", "–ù–æ–≤—ã–π –°–≤–µ—Ç", "–§–æ—Ä–æ—Å"}

SEA_POINTS = {
    "–Ø–ª—Ç–∞": (44.495, 34.166),
    "–°–µ–≤–∞—Å—Ç–æ–ø–æ–ª—å": (44.605, 33.495),
    "–ê–ª—É—à—Ç–∞": (44.665, 34.415),
    "–°—É–¥–∞–∫": (44.843, 34.973),
    "–§–µ–æ–¥–æ—Å–∏—è": (45.042, 35.389),
    "–ï–≤–ø–∞—Ç–æ—Ä–∏—è": (45.203, 33.363),
    "–ù–æ–≤—ã–π –°–≤–µ—Ç": (44.826, 34.914),
}

# ================= –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ –±–∞–∑—ã =================
TOILETS = {
    "–°–µ–≤–∞—Å—Ç–æ–ø–æ–ª—å": [
        {"name": "–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç—É–∞–ª–µ—Ç", "address": "–ø–ª–æ—â–∞–¥—å –í–æ—Å—Å—Ç–∞–≤—à–∏—Ö, –¥. 4, –∫–æ—Ä–ø. 1, –ª–∏—Ç–µ—Ä–∞ –ê, —ç—Ç. 1, 2", "hours": "–ó–∞–∫—Ä–æ–µ—Ç—Å—è —á–µ—Ä–µ–∑ 56 –º–∏–Ω—É—Ç"},
        {"name": "–ü–ª–∞—Ç–Ω—ã–π –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç—É–∞–ª–µ—Ç", "address": "–ø—Ä–æ—Å–ø. –ì–µ–Ω–µ—Ä–∞–ª–∞ –û—Å—Ç—Ä—è–∫–æ–≤–∞, 235", "hours": "–ó–∞–∫—Ä—ã—Ç–æ –¥–æ —Å—Ä–µ–¥—ã"},
        {"name": "–ü–ª–∞—Ç–Ω—ã–π –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç—É–∞–ª–µ—Ç", "address": "–ù–∞–∑—É–∫–∏–Ω–∞ –Ω–∞–±–µ—Ä–µ–∂–Ω–∞—è, 35", "hours": "–û—Ç–∫—Ä—ã—Ç–æ –¥–æ 21:40"},
        {"name": "–ü–ª–∞—Ç–Ω—ã–π –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç—É–∞–ª–µ—Ç", "address": "–ù–∞—Ö–∏–º–æ–≤–∞ –ø–ª., 3–ê, —ç—Ç–∞–∂ 1", "hours": "–ó–∞–∫—Ä–æ–µ—Ç—Å—è —á–µ—Ä–µ–∑ 56 –º–∏–Ω—É—Ç"},
        {"name": "–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç—É–∞–ª–µ—Ç", "address": "—É–ª–∏—Ü–∞ –ê–¥–º–∏—Ä–∞–ª–∞ –û–∫—Ç—è–±—Ä—å—Å–∫–æ–≥–æ, 20–∫1", "hours": "–ó–∞–∫—Ä—ã—Ç–æ –¥–æ —Å—Ä–µ–¥—ã"},
        {"name": "–ü–ª–∞—Ç–Ω—ã–π —Ç—É–∞–ª–µ—Ç", "address": "–ë–∞–ª–∞–∫–ª–∞–≤—Å–∫–æ–µ —à–æ—Å—Å–µ 5 –∫–∏–ª–æ–º–µ—Ç—Ä, 5/17–∫1", "hours": "–ó–∞–∫—Ä—ã—Ç–æ –¥–æ —Å—Ä–µ–¥—ã"},
        {"name": "–ü–ª–∞—Ç–Ω—ã–π –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç—É–∞–ª–µ—Ç", "address": "—à–æ—Å—Å–µ –ë–∞–ª–∞–∫–ª–∞–≤—Å–∫–æ–µ, 9–ì"},
    ],
    "–°–∏–º—Ñ–µ—Ä–æ–ø–æ–ª—å": [
        {"name": "–û–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç—É–∞–ª–µ—Ç", "address": "–°–∏–º—Ñ–µ—Ä–æ–ø–æ–ª—å, –Ø–±–ª–æ—á–∫–æ–≤–∞ —É–ª–∏—Ü–∞, 19–ê/2", "hours": "–ó–∞–∫—Ä—ã—Ç–æ –¥–æ —Å—Ä–µ–¥—ã"},
        {"name": "–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç—É–∞–ª–µ—Ç", "address": "–°–∏–º—Ñ–µ—Ä–æ–ø–æ–ª—å, –°–∞–º–æ–∫–∏—à–∞ —É–ª., –¥. 18, —ç—Ç–∞–∂ 1-4", "hours": "–û—Ç–∫—Ä—ã—Ç–æ –¥–æ 21:00"},
        {"name": "–û–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç—É–∞–ª–µ—Ç", "address": "–°–∏–º—Ñ–µ—Ä–æ–ø–æ–ª—å, —É–ª. –ö–æ–∑–ª–æ–≤–∞, 5, —ç—Ç. 1", "hours": "–ó–∞–∫—Ä—ã—Ç–æ –¥–æ —Å—Ä–µ–¥—ã"},
        {"name": "–û–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç—É–∞–ª–µ—Ç", "address": "–°–∏–º—Ñ–µ—Ä–æ–ø–æ–ª—å, —É–ª–∏—Ü–∞ –ö–µ—á–∫–µ–º–µ—Ç—Å–∫–∞—è, 180/5", "hours": "–û—Ç–∫—Ä—ã—Ç–æ –¥–æ 21:00"},
        {"name": "–ü–ª–∞—Ç–Ω—ã–π –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç—É–∞–ª–µ—Ç", "address": "–°–∏–º—Ñ–µ—Ä–æ–ø–æ–ª—å, –°—É–±—Ö–∏ —É–ª., 2, –∫. 2, —ç—Ç. 1", "hours": "–ó–∞–∫—Ä—ã—Ç–æ –¥–æ —Å—Ä–µ–¥—ã"},
        {"name": "–ö—Ä—ã–º–∞–≤—Ç–æ—Ç—Ä–∞–Ω—Å, –ú—É–∂—Å–∫–æ–π —Ç—É–∞–ª–µ—Ç", "address": "–°–∏–º—Ñ–µ—Ä–æ–ø–æ–ª—å, –ö–∏–µ–≤—Å–∫–∞—è —É–ª., 100–ë, —Å—Ç—Ä–æ–µ–Ω–∏–µ 4, —ç—Ç. 1"},
    ],
    "–Ø–ª—Ç–∞": [
        {"name": "–ü–ª–∞—Ç–Ω—ã–π —Ç—É–∞–ª–µ—Ç", "address": "–Ω–∞–±. –∏–º. –õ–µ–Ω–∏–Ω–∞, 5–ê, —ç—Ç–∞–∂ 1", "hours": "–û—Ç–∫—Ä—ã—Ç–æ –¥–æ 21:00"},
        {"name": "–ü–ª–∞—Ç–Ω—ã–π –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç—É–∞–ª–µ—Ç", "address": "–ú–æ—Å–∫–æ–≤—Å–∫–∞—è, –¥. 33, —ç—Ç–∞–∂ 1", "hours": "–ó–∞–∫—Ä—ã—Ç–æ –¥–æ —Å—Ä–µ–¥—ã"},
        {"name": "–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç—É–∞–ª–µ—Ç", "address": "—É–ª–∏—Ü–∞ –ö–∏–µ–≤—Å–∫–∞—è, –¥–æ–º 6, –î–æ–º —Ç–æ—Ä–≥–æ–≤–ª–∏, —ç—Ç–∞–∂ 3", "hours": "–û—Ç–∫—Ä—ã—Ç–æ –¥–æ 22:00"},
        {"name": "–ü–ª–∞—Ç–Ω—ã–π —Ç—É–∞–ª–µ—Ç", "address": "—É–ª. –ï–∫–∞—Ç–µ—Ä–∏–Ω–∏–Ω—Å–∫–∞—è, 4–ë", "hours": "–û—Ç–∫—Ä—ã—Ç–æ –¥–æ 22:00"},
        {"name": "–ü–ª–∞—Ç–Ω—ã–π —Ç—É–∞–ª–µ—Ç", "address": "–ø–µ—Ä–µ—É–ª–æ–∫ –ß–µ—Ä–Ω–æ–º–æ—Ä—Å–∫–∏–π, 2/1", "hours": "–û—Ç–∫—Ä—ã—Ç–æ –¥–æ 22:00"},
        {"name": "–ü–ª–∞—Ç–Ω—ã–π –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç—É–∞–ª–µ—Ç", "address": "–ü—É—à–∫–∏–Ω—Å–∫–∞—è, 12", "hours": "–û—Ç–∫—Ä—ã—Ç–æ –¥–æ 22:00"},
        {"name": "–ü–ª–∞—Ç–Ω—ã–π —Ç—É–∞–ª–µ—Ç", "address": "–ö–∞—Ä–ª–∞ –ú–∞—Ä–∫—Å–∞, 3–ë"},
    ],
    "–ê–ª—É—à—Ç–∞": [
        {"name": "–¢—É–∞–ª–µ—Ç", "address": "–°–∏–º—Ñ–µ—Ä–æ–ø–æ–ª—å—Å–∫–∞—è —É–ª., 1, –ê–ª—É—à—Ç–∞"},
        {"name": "–¢—É–∞–ª–µ—Ç", "address": "–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ö—Ä—ã–º, –≥–æ—Ä–æ–¥—Å–∫–æ–π –æ–∫—Ä—É–≥ –ê–ª—É—à—Ç–∞, –°—Ç—Ä–µ–ª—å–±–∏—â–µ"},
        {"name": "–ü–ª–∞—Ç–Ω—ã–π —Ç—É–∞–ª–µ—Ç", "address": "–ü–∞—Ä–∫–æ–≤–∞—è —É–ª., 2, –ê–ª—É—à—Ç–∞"},
        {"name": "–¢—É–∞–ª–µ—Ç", "address": "–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ö—Ä—ã–º, –ê–ª—É—à—Ç–∞, –º–∏–∫—Ä–æ—Ä–∞–π–æ–Ω –ü—Ä–æ—Ñ–µ—Å—Å–æ—Ä—Å–∫–∏–π –£–≥–æ–ª–æ–∫"},
    ],
    "–§–µ–æ–¥–æ—Å–∏—è": [
        {"name": "–¢—É–∞–ª–µ—Ç", "address": "–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ö—Ä—ã–º, –§–µ–æ–¥–æ—Å–∏—è, –±—É–ª—å–≤–∞—Ä –°—Ç–∞—Ä—à–∏–Ω–æ–≤–∞", "hours": "–µ–∂–µ–¥–Ω–µ–≤–Ω–æ, 09:00‚Äì17:00"},
        {"name": "–¢—É–∞–ª–µ—Ç", "address": "–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ö—Ä—ã–º, –§–µ–æ–¥–æ—Å–∏—è, –º–∏–∫—Ä–æ—Ä–∞–π–æ–Ω –ü–µ—Ä–≤—É—à–∏–Ω–∞", "hours": "–µ–∂–µ–¥–Ω–µ–≤–Ω–æ, 08:00‚Äì16:00"},
        {"name": "–¢—É–∞–ª–µ—Ç", "address": "—É–ª. –ù–∞—Ö–∏–º–æ–≤–∞, 5, –§–µ–æ–¥–æ—Å–∏—è", "hours": "–µ–∂–µ–¥–Ω–µ–≤–Ω–æ, 08:00‚Äì17:00"},
        {"name": "–¢—É–∞–ª–µ—Ç", "address": "—É–ª. –ù–∞—Ö–∏–º–æ–≤–∞, 2, –§–µ–æ–¥–æ—Å–∏—è", "hours": "–µ–∂–µ–¥–Ω–µ–≤–Ω–æ, 09:00‚Äì17:00"},
        {"name": "–¢—É–∞–ª–µ—Ç", "address": "–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ö—Ä—ã–º, –§–µ–æ–¥–æ—Å–∏—è, –ø—Ä–æ—Å–ø–µ–∫—Ç –ê–π–≤–∞–∑–æ–≤—Å–∫–æ–≥–æ", "hours": "–µ–∂–µ–¥–Ω–µ–≤–Ω–æ, 09:00‚Äì18:00"},
        {"name": "–¢—É–∞–ª–µ—Ç", "address": "—É–ª. –§–µ–¥—å–∫–æ, 2–ê, –§–µ–æ–¥–æ—Å–∏—è"},
        {"name": "–¢—É–∞–ª–µ—Ç", "address": "—É–ª. –ù–∞–∑—É–∫–∏–Ω–∞, 10–ê, –§–µ–æ–¥–æ—Å–∏—è"},
    ],
    "–ï–≤–ø–∞—Ç–æ—Ä–∏—è": [
        {"name": "–¢—É–∞–ª–µ—Ç", "address": "–Ω–∞–±. –ì–æ—Ä—å–∫–æ–≥–æ, 1, –ï–≤–ø–∞—Ç–æ—Ä–∏—è", "hours": "–µ–∂–µ–¥–Ω–µ–≤–Ω–æ, 09:00‚Äì23:00"},
        {"name": "–¢—É–∞–ª–µ—Ç", "address": "–ø—Ä–æ—Å–ø. –ü–æ–±–µ–¥—ã, 49, –ï–≤–ø–∞—Ç–æ—Ä–∏—è", "hours": "–µ–∂–µ–¥–Ω–µ–≤–Ω–æ, 08:00‚Äì19:00"},
        {"name": "–¢—É–∞–ª–µ—Ç", "address": "—É–ª. –ì–æ—Ä—å–∫–æ–≥–æ, 5–£, –ï–≤–ø–∞—Ç–æ—Ä–∏—è", "hours": "–µ–∂–µ–¥–Ω–µ–≤–Ω–æ, 09:00‚Äì23:00"},
        {"name": "–¢—É–∞–ª–µ—Ç", "address": "–†–∞–∑–¥–æ–ª—å–Ω–µ–Ω—Å–∫–æ–µ —à., 1–î, –ï–≤–ø–∞—Ç–æ—Ä–∏—è", "phone": "+7 (3652) 77-20-40", "hours": "–µ–∂–µ–¥–Ω–µ–≤–Ω–æ, –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ"},
        {"name": "–¢—É–∞–ª–µ—Ç", "address": "—É–ª. –ì–æ—Ä—å–∫–æ–≥–æ, 5–ö, –ï–≤–ø–∞—Ç–æ—Ä–∏—è", "hours": "–µ–∂–µ–¥–Ω–µ–≤–Ω–æ, 08:00‚Äì00:00"},
        {"name": "–¢—É–∞–ª–µ—Ç", "address": "–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ö—Ä—ã–º, –ï–≤–ø–∞—Ç–æ—Ä–∏—è, –∫–≤–∞—Ä—Ç–∞–ª –ö—É—Ä–æ—Ä—Ç–Ω—ã–π"},
    ],
}

POLICE = {
    "–ï–≤–ø–∞—Ç–æ—Ä–∏—è": [
        {"name": "–û—Ç–¥–µ–ª –ø–æ–ª–∏—Ü–∏–∏", "address": "–ø—Ä–æ–µ–∑–¥ 9 –ú–∞—è, 3, –ï–≤–ø–∞—Ç–æ—Ä–∏—è", "hours": "–≤—Ç 9:00‚Äì11:00; —á—Ç 17:00‚Äì20:00; —Å–± 10:00‚Äì13:00"},
        {"name": "–ü–æ–ª–∏—Ü–∏—è", "address": "–ï–≤–ø–∞—Ç–æ—Ä–∏–π—Å–∫–∞—è —É–ª., 4, —Å–µ–ª–æ –£—é—Ç–Ω–æ–µ", "phone": "+7 (999) 461-06-74"},
        {"name": "–ü–æ–ª–∏—Ü–∏—è", "address": "–ü–µ—Ä–µ–∫–æ–ø—Å–∫–∞—è —É–ª., 2, –ï–≤–ø–∞—Ç–æ—Ä–∏—è"},
    ],
    "–ê–ª—É—à—Ç–∞": [
        {"name": "–ü–æ–ª–∏—Ü–∏—è", "address": "–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ö—Ä—ã–º, –ê–ª—É—à—Ç–∞, —É–ª–∏—Ü–∞ –õ–µ–Ω–∏–Ω–∞"},
        {"name": "–ü–æ–ª–∏—Ü–∏—è", "address": "—É–ª. –õ–µ–Ω–∏–Ω–∞, 22, –ê–ª—É—à—Ç–∞"},
    ],
    "–§–µ–æ–¥–æ—Å–∏—è": [
        {"name": "–ü–æ–ª–∏—Ü–∏—è", "address": "—É–ª. –ì–∞–≥–∞—Ä–∏–Ω–∞, 15, –ø. –≥. —Ç. –ü—Ä–∏–º–æ—Ä—Å–∫–∏–π"},
        {"name": "–û–ø–æ—Ä–Ω—ã–π –ø—É–Ω–∫—Ç –ø–æ–ª–∏—Ü–∏–∏", "address": "—É–ª. –ì–∞—Ä–Ω–∞–µ–≤–∞, 71–ê, –§–µ–æ–¥–æ—Å–∏—è"},
        {"name": "–£—á–∞—Å—Ç–∫–æ–≤—ã–π –ø—É–Ω–∫—Ç –ø–æ–ª–∏—Ü–∏–∏ ‚Ññ3", "address": "–±—É–ª. –°—Ç–∞—Ä—à–∏–Ω–æ–≤–∞, 12, –§–µ–æ–¥–æ—Å–∏—è"},
    ],
    "–°—É–¥–∞–∫": [
        {"name": "–û—Ç–¥–µ–ª –ú–í–î –†–æ—Å—Å–∏–∏ –ø–æ –≥. –°—É–¥–∞–∫—É", "address": "–ü–∞—Ä—Ç–∏–∑–∞–Ω—Å–∫–∞—è —É–ª., 10, –°—É–¥–∞–∫", "phone": "+7 (999) 461-09-58"},
        {"name": "–ü–æ–ª–∏—Ü–∏—è", "address": "—É–ª. –õ—å–≤–∞ –ì–æ–ª–∏—Ü—ã–Ω–∞, 18, –ø. –≥. —Ç. –ù–æ–≤—ã–π –°–≤–µ—Ç", "phone": "+7 (999) 461-09-61"},
    ],
    "–°–∏–º—Ñ–µ—Ä–æ–ø–æ–ª—å": [
        {"name": "–£—á–∞—Å—Ç–∫–æ–≤—ã–π –ø—É–Ω–∫—Ç –ø–æ–ª–∏—Ü–∏–∏", "address": "–ü—Ä–∏–≤–æ–∫–∑–∞–ª—å–Ω–∞—è –ø–ª–æ—â–∞–¥—å, 3–ê, –°–∏–º—Ñ–µ—Ä–æ–ø–æ–ª—å", "hours": "–µ–∂–µ–¥–Ω–µ–≤–Ω–æ, –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ"},
        {"name": "–£—á–∞—Å—Ç–∫–æ–≤—ã–π –ø—É–Ω–∫—Ç –ø–æ–ª–∏—Ü–∏–∏", "address": "–ö–æ–≤—ã–ª—å–Ω–∞—è —É–ª., 46, –°–∏–º—Ñ–µ—Ä–æ–ø–æ–ª—å"},
        {"name": "–£—á–∞—Å—Ç–∫–æ–≤—ã–π –ø—É–Ω–∫—Ç –ø–æ–ª–∏—Ü–∏–∏", "address": "—É–ª. –¢—Ä—É–±–∞—á–µ–Ω–∫–æ, 18, –°–∏–º—Ñ–µ—Ä–æ–ø–æ–ª—å", "phone": "102, +7 (999) 461-03-49"},
        {"name": "–£—á–∞—Å—Ç–∫–æ–≤—ã–π –ø—É–Ω–∫—Ç –ø–æ–ª–∏—Ü–∏–∏", "address": "—É–ª. –ì–æ—Ä—å–∫–æ–≥–æ, 7, –°–∏–º—Ñ–µ—Ä–æ–ø–æ–ª—å"},
        {"name": "–£—á–∞—Å—Ç–∫–æ–≤—ã–π –ø—É–Ω–∫—Ç –ø–æ–ª–∏—Ü–∏–∏", "address": "—É–ª. 1-–π –ö–æ–Ω–Ω–æ–π –ê—Ä–º–∏–∏, 74–ê, –°–∏–º—Ñ–µ—Ä–æ–ø–æ–ª—å"},
    ],
    "–°–µ–≤–∞—Å—Ç–æ–ø–æ–ª—å": [
        {"name": "–ü–æ–ª–∏—Ü–∏—è", "address": "—É–ª. –ü–æ–∂–∞—Ä–æ–≤–∞, 3, –°–µ–≤–∞—Å—Ç–æ–ø–æ–ª—å", "phone": "102"},
        {"name": "–ü–æ–ª–∏—Ü–∏—è", "address": "—É–ª. –ì–µ–Ω–µ—Ä–∞–ª–∞ –ü–µ—Ç—Ä–æ–≤–∞, 15, –°–µ–≤–∞—Å—Ç–æ–ø–æ–ª—å", "phone": "102"},
        {"name": "–ü–æ–ª–∏—Ü–∏—è", "address": "–†–æ—Å—Å–∏—è, –°–µ–≤–∞—Å—Ç–æ–ø–æ–ª—å, —É–ª–∏—Ü–∞ –†—É–¥–Ω–µ–≤–∞"},
        {"name": "–ü–æ–ª–∏—Ü–∏—è", "address": "–†–æ—Å—Å–∏—è, –°–µ–≤–∞—Å—Ç–æ–ø–æ–ª—å, –ò–Ω–¥—É—Å—Ç—Ä–∏–∞–ª—å–Ω–∞—è —É–ª–∏—Ü–∞"},
        {"name": "–ü–æ–ª–∏—Ü–∏—è", "address": "–†–æ—Å—Å–∏—è, –°–µ–≤–∞—Å—Ç–æ–ø–æ–ª—å, –ë–æ–ª—å—à–∞—è –ú–æ—Ä—Å–∫–∞—è —É–ª–∏—Ü–∞, 30"},
    ],
    "–Ø–ª—Ç–∞": [
        {"name": "–ü–æ–ª–∏—Ü–∏—è", "address": "—É–ª. –ö–∞—Ä–ª–∞ –ú–∞—Ä–∫—Å–∞, 11, –Ø–ª—Ç–∞"},
    ],
}


MEDHELP = {
    "–°–µ–≤–∞—Å—Ç–æ–ø–æ–ª—å": [{"name": "–ü–µ—Ä–≤–∞—è –ø–æ–º–æ—â—å", "address": "–Ω–∞–±. –ü–∞—Ä–∫ –ü–æ–±–µ–¥—ã, 7, –°–µ–≤–∞—Å—Ç–æ–ø–æ–ª—å"}],
    "–°–∏–º—Ñ–µ—Ä–æ–ø–æ–ª—å": [{"name": "–ü–µ—Ä–≤–∞—è –ø–æ–º–æ—â—å", "address": "—É–ª. –õ–∏–∑—ã –ß–∞–π–∫–∏–Ω–æ–π, 5–∞, –°–∏–º—Ñ–µ—Ä–æ–ø–æ–ª—å"}],
    "–§–µ–æ–¥–æ—Å–∏—è": [{"name": "–ü–µ—Ä–≤–∞—è –ø–æ–º–æ—â—å", "address": "—É–ª. –î–∑–µ—Ä–∂–∏–Ω—Å–∫–æ–≥–æ, 4, –ø. –≥. —Ç. –ö–∏—Ä–æ–≤—Å–∫–æ–µ, –§–µ–æ–¥–æ—Å–∏—è"}],
    "–°—É–¥–∞–∫": [{"name": "–ü–µ—Ä–≤–∞—è –ø–æ–º–æ—â—å", "address": "–í–æ—Å—Ç–æ—á–Ω–æ–µ —à., 31, –°—É–¥–∞–∫"}],
    "–ï–≤–ø–∞—Ç–æ—Ä–∏—è": [{"name": "–ü–µ—Ä–≤–∞—è –ø–æ–º–æ—â—å", "address": "—É–ª. –î–º–∏—Ç—Ä–∏—è –£–ª—å—è–Ω–æ–≤–∞, 58, –ï–≤–ø–∞—Ç–æ—Ä–∏—è"}],
    "–Ø–ª—Ç–∞": [{"name": "–ü–µ—Ä–≤–∞—è –ø–æ–º–æ—â—å", "address": "—É–ª. –ü–∞–ª—å–º–∏—Ä–æ –¢–æ–ª—å—è—Ç—Ç–∏, 16–∞, –Ø–ª—Ç–∞"}],
    "–ê–ª—É—à—Ç–∞": [{"name": "–ü–µ—Ä–≤–∞—è –ø–æ–º–æ—â—å", "address": "–ü–∞—Ä—Ç–∏–∑–∞–Ω—Å–∫–∞—è —É–ª., 3, –ê–ª—É—à—Ç–∞"}],
}


# ================== Helpers ===================
def safe_float(x, default=0.0):
    try:
        return float(str(x).replace(",", "."))
    except Exception:
        return default

def haversine_km(lat1, lon1, lat2, lon2) -> float:
    R = 6371.0
    p1, p2 = math.radians(lat1), math.radians(lat2)
    dp, dl = math.radians(lat2 - lat1), math.radians(lon2 - lon1)
    a = math.sin(dp / 2) ** 2 + math.cos(p1) * math.cos(p2) * math.sin(dl / 2) ** 2
    return 2 * R * math.asin(math.sqrt(a))

def score_place(row, user_tags: List[str], origin: Tuple[float, float], has_car: bool):
    s = safe_float(row.get("rating", 0)) * 10
    tags = set(map(str.strip, str(row.get("tags", "")).split(",")))
    common = tags.intersection(user_tags)
    s += 6 * len(common)
    dist = haversine_km(origin[0], origin[1], safe_float(row["lat"]), safe_float(row["lon"]))
    max_ok = 60 if has_car else 12
    if dist > max_ok:
        s -= (dist - max_ok) * 1.5
    else:
        s += 5
    return s

# ================== Weather ===================
WEATHER_CODES = {0: "—è—Å–Ω–æ", 1: "–æ–±–ª–∞—á–Ω–æ", 2: "–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å", 3: "–ø–∞—Å–º—É—Ä–Ω–æ", 61: "–¥–æ–∂–¥—å", 80: "–ª–∏–≤–µ–Ω—å"}

async def get_weather(city):
    lat, lon = CITIES_PRESETS.get(city, (44.9, 34.1))
    async with aiohttp.ClientSession() as s:
        try:
            wurl = f"https://api.open-meteo.com/v1/forecast?latitude={lat}&longitude={lon}&current_weather=true"
            r = await s.get(wurl)
            d = await r.json()
            w = d.get("current_weather", {})
            t = w.get("temperature", "?")
            v = w.get("windspeed", "?")
            c = WEATHER_CODES.get(w.get("weathercode"), "—è—Å–Ω–æ")
            line = f"üå§ *{city}*\n{c}, {t}¬∞C\nüí® {v} –º/—Å"
        except:
            line = f"üå§ *{city}*\n–ü–æ–≥–æ–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
        if city in SEA_POINTS:
            lat2, lon2 = SEA_POINTS[city]
            try:
                surl = f"https://marine-api.open-meteo.com/v1/marine?latitude={lat2}&longitude={lon2}&current=sea_surface_temperature"
                r2 = await s.get(surl)
                d2 = await r2.json()
                t2 = d2.get("current", {}).get("sea_surface_temperature")
                if t2:
                    line += f"\nüåä {t2:.1f}¬∞C"
            except:
                pass
    return line

# ================== UI ===================
def restart_kb():
    return InlineKeyboardMarkup([[InlineKeyboardButton("üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="restart")]])

def interests_kb(selected, city):
    items = INTERESTS if city in COASTAL_CITIES else [i for i in INTERESTS if i[0] != "–º–æ—Ä–µ"]
    rows, row = [], []
    for key, label in items:
        mark = "‚úÖ " if key in selected else ""
        row.append(InlineKeyboardButton(mark + label, callback_data=f"tag:{key}"))
        if len(row) == 2:
            rows.append(row)
            row = []
    if row:
        rows.append(row)
    rows.append([
        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_city"),
        InlineKeyboardButton("–ì–æ—Ç–æ–≤–æ ‚úÖ", callback_data="done"),
    ])
    return InlineKeyboardMarkup(rows)

# ================== Bot Flow ===================
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    kb = [[KeyboardButton(c)] for c in CITIES_PRESETS]
    await update.message.reply_text(
    "–ü—Ä–∏–≤–µ—Ç! üöÄ\n–Ø ‚Äî AI Travel Crimea, —Ç–≤–æ–π –∫–∞—Ä–º–∞–Ω–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –ø–æ–µ–∑–¥–∫–µ –ø–æ –ö—Ä—ã–º—É üèù\n\n–í—ã–±–µ—Ä–∏ –≥–æ—Ä–æ–¥, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –ª—É—á—à–∏–µ –º–µ—Å—Ç–∞ –∏ –ø–æ–ª–µ–∑–Ω—ã–µ –ª–æ–∫–∞—Ü–∏–∏ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏ üåÜ",
    reply_markup=ReplyKeyboardMarkup(kb, resize_keyboard=True)
)

    return ASK_CITY

async def ask_interests(update: Update, context: ContextTypes.DEFAULT_TYPE):
    city = update.message.text.strip()
    if city not in CITIES_PRESETS:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏ –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return ASK_CITY
    context.user_data["city"] = city
    context.user_data["origin"] = CITIES_PRESETS[city]
    context.user_data["tags"] = set()
    await update.message.reply_text(f"–û—Ç–ª–∏—á–Ω–æ, {city}! –í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã:", reply_markup=interests_kb(set(), city))
    return ASK_INTERESTS

async def handle_restart(query, context):
    await query.message.reply_text(
        "üîÅ –ù–∞—á–Ω—ë–º –∑–∞–Ω–æ–≤–æ! –í—ã–±–µ—Ä–∏ –≥–æ—Ä–æ–¥:",
        reply_markup=ReplyKeyboardMarkup([[KeyboardButton(c)] for c in CITIES_PRESETS], resize_keyboard=True),
    )
    return ASK_CITY  # –≤–∞–∂–Ω–æ–µ: –æ—Å—Ç–∞—ë–º—Å—è –≤ —Ä–∞–∑–≥–æ–≤–æ—Ä–µ –∏ –∂–¥—ë–º –≥–æ—Ä–æ–¥

async def interests_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    city = context.user_data.get("city", "")
    tags = context.user_data.get("tags", set())

    if data == "restart":
        return await handle_restart(query, context)
    if data == "back_city":
        return await handle_restart(query, context)

    if data.startswith("tag:"):
        tag = data.split(":", 1)[1]

        # üöª / üè• / üëÆ
        if tag == "—Ç—É–∞–ª–µ—Ç—ã":
            toilets = TOILETS.get(city, [])
            if not toilets:
                await query.message.reply_text("üöª –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç—Ç–æ–≥–æ –≥–æ—Ä–æ–¥–∞.")
            else:
                for t in toilets:
                    link = f"https://yandex.ru/maps/?text={quote_plus(t['address'])}"
                    await query.message.reply_text(
                        f"üöª {t['name']}\n{t['address']}\n[–û—Ç–∫—Ä—ã—Ç—å –≤ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç–∞—Ö]({link})",
                        parse_mode="Markdown", disable_web_page_preview=True
                    )
            await query.message.reply_text("–•–æ—á–µ—à—å –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ?", reply_markup=restart_kb())
            return ASK_INTERESTS

        if tag == "–º–µ–¥–∏—Ü–∏–Ω–∞":
            for t in MEDHELP.get(city, []):
                link = f"https://yandex.ru/maps/?text={quote_plus(t['address'])}"
                await query.message.reply_text(
                    f"üè• {t['name']}\n{t['address']}\n[–û—Ç–∫—Ä—ã—Ç—å –≤ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç–∞—Ö]({link})",
                    parse_mode="Markdown", disable_web_page_preview=True
                )
            await query.message.reply_text("–•–æ—á–µ—à—å –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ?", reply_markup=restart_kb())
            return ASK_INTERESTS

        if tag == "–ø–æ–ª–∏—Ü–∏—è":
            for t in POLICE.get(city, []):
                link = f"https://yandex.ru/maps/?text={quote_plus(t['address'])}"
                await query.message.reply_text(
                    f"üëÆ {t['name']}\n{t['address']}\n[–û—Ç–∫—Ä—ã—Ç—å –≤ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç–∞—Ö]({link})",
                    parse_mode="Markdown", disable_web_page_preview=True
                )
            await query.message.reply_text("–•–æ—á–µ—à—å –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ?", reply_markup=restart_kb())
            return ASK_INTERESTS

        # –æ–±—ã—á–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã
        if tag in tags:
            tags.remove(tag)
        else:
            tags.add(tag)
        context.user_data["tags"] = tags
        await query.edit_message_text(
            f"–í—ã–±—Ä–∞–Ω–æ: {', '.join(tags) if tags else '–Ω–∏—á–µ–≥–æ'}",
            reply_markup=interests_kb(tags, city)
        )
        return ASK_INTERESTS

    if data == "done":
        if not tags:
            await query.answer("–í—ã–±–µ—Ä–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∏–Ω—Ç–µ—Ä–µ—Å üôÇ", show_alert=True)
            return ASK_INTERESTS
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("üöó –î–∞", callback_data="car_yes")],
            [InlineKeyboardButton("üö∂ –ù–µ—Ç", callback_data="car_no")],
            [InlineKeyboardButton("üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="restart")],
        ])
        await query.edit_message_text("–ï—Å—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å?", reply_markup=kb)
        return ASK_CAR

async def car_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    city = context.user_data["city"]
    tags = list(context.user_data["tags"])
    origin = context.user_data["origin"]
    has_car = query.data == "car_yes"

    await query.edit_message_text("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –ø–æ–≥–æ–¥—É –∏ –º–µ—Å—Ç–∞...")
    weather = await get_weather(city)
    await query.message.reply_text(weather, parse_mode="Markdown")

    df_city = df[df["city"].astype(str).str.lower() == city.lower()].copy()
    if df_city.empty:
        await query.message.reply_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —ç—Ç–æ–º—É –≥–æ—Ä–æ–¥—É.")
        return await handle_restart(query, context)

    # === –†–∞—Å—Å—á—ë—Ç —Å–∫–æ—Ä–∏–Ω–≥–∞ ===
    df_city["score"] = df_city.apply(lambda r: score_place(r, tags, origin, has_car), axis=1)
    top = df_city.sort_values("score", ascending=False).head(5)

    # === –í—ã–≤–æ–¥ –∫–∞—Ä—Ç–æ—á–µ–∫ –º–µ—Å—Ç ===
    for _, r in top.iterrows():
        query_text = f"{r['name']} {r['city']}"
        yandex = f"https://yandex.ru/maps/?text={quote_plus(query_text)}"

        rating_val = r.get("rating")
        rating_val = 4.5 if pd.isna(rating_val) else float(rating_val)

        caption = (
            f"*{r['name']}* ‚Äî {r['city']}\n"
            f"‚≠ê {rating_val:.1f} | _{r['tags']}_\n"
            f"[–û—Ç–∫—Ä—ã—Ç—å –≤ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç–∞—Ö]({yandex})"
        )

        photo = str(r.get("photo", "")).strip()
        if photo.startswith("http"):
            try:
                await query.message.reply_photo(photo=photo, caption=caption, parse_mode="Markdown")
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}")
                await query.message.reply_text(caption, parse_mode="Markdown", disable_web_page_preview=True)
        else:
            await query.message.reply_text(caption, parse_mode="Markdown", disable_web_page_preview=True)

    # === –ö–æ–Ω–µ—Ü: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –≥–æ—Ä–æ–¥–∞ ===
    await query.message.reply_text("–•–æ—á–µ—à—å –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ?", reply_markup=restart_kb())
    return ASK_CITY


# ================== Main ==================
def main():
    token = os.getenv("BOT_TOKEN")
    app = ApplicationBuilder().token(token).build()

    conv = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            ASK_CITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_interests)],
            ASK_INTERESTS: [CallbackQueryHandler(interests_callback)],
            ASK_CAR: [CallbackQueryHandler(car_callback)],
        },
        fallbacks=[CommandHandler("cancel", start)],
        allow_reentry=True,
    )
    app.add_handler(conv)

    # ‚ùå –ë–æ–ª—å—à–µ –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º –≤–Ω–µ—à–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ "restart" ‚Äî –æ–Ω –ª–æ–º–∞–ª —Ä–µ-—ç–Ω—Ç—Ä–∏
    # app.add_handler(CallbackQueryHandler(interests_callback, pattern="^restart$"))

    app.run_polling()

if __name__ == "__main__":
    main()
